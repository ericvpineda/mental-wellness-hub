"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dashboard_exports = {};
__export(dashboard_exports, {
  dashboard: () => dashboard,
  deploymentDashboardUrl: () => deploymentDashboardUrl,
  deploymentDashboardUrlPage: () => deploymentDashboardUrlPage,
  projectDashboardUrl: () => projectDashboardUrl,
  teamDashboardUrl: () => teamDashboardUrl
});
module.exports = __toCommonJS(dashboard_exports);
var import_chalk = __toESM(require("chalk"), 1);
var import_open = __toESM(require("open"), 1);
var import_context = require("../bundler/context.js");
var import_api = require("./lib/api.js");
var import_extra_typings = require("@commander-js/extra-typings");
var import_command = require("./lib/command.js");
const DASHBOARD_HOST = process.env.CONVEX_PROVISION_HOST ? "http://localhost:6789" : "https://dashboard.convex.dev";
const dashboard = new import_extra_typings.Command("dashboard").description("Open the dashboard in the browser").option(
  "--no-open",
  "Don't automatically open the dashboard in the default browser"
).addDeploymentSelectionOptions((0, import_command.actionDescription)("Open the dashboard for")).showHelpAfterError().action(async (options) => {
  const ctx = import_context.oneoffContext;
  const deploymentSelection = (0, import_api.deploymentSelectionFromOptions)(options);
  const { deploymentName } = await (0, import_api.fetchDeploymentCredentialsProvisionProd)(
    ctx,
    deploymentSelection
  );
  if (deploymentName === void 0) {
    (0, import_context.logFailure)(
      ctx,
      "No deployment name, run `npx convex dev` to configure a Convex project"
    );
    return await ctx.crash(1, "invalid filesystem data");
  }
  const loginUrl = await deploymentDashboardUrlPage(ctx, deploymentName, "");
  if (options.open) {
    (0, import_context.logMessage)(
      ctx,
      import_chalk.default.gray(`Opening ${loginUrl} in the default browser...`)
    );
    await (0, import_open.default)(loginUrl);
  } else {
    console.log(loginUrl);
  }
});
async function deploymentDashboardUrlPage(ctx, configuredDeployment, page) {
  if (configuredDeployment !== null) {
    const { team, project } = await (0, import_api.fetchTeamAndProject)(
      ctx,
      configuredDeployment
    );
    return deploymentDashboardUrl(team, project, configuredDeployment) + page;
  } else {
    return `${DASHBOARD_HOST}/deployment/${page}`;
  }
}
function deploymentDashboardUrl(team, project, deploymentName) {
  return `${projectDashboardUrl(team, project)}/${deploymentName}`;
}
function projectDashboardUrl(team, project) {
  return `${teamDashboardUrl(team)}/${project}`;
}
function teamDashboardUrl(team) {
  return `${DASHBOARD_HOST}/t/${team}`;
}
//# sourceMappingURL=dashboard.js.map
