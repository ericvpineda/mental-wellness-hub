{
  "version": 3,
  "sources": ["../../../src/cli/deploy.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Command, Option } from \"@commander-js/extra-typings\";\nimport inquirer from \"inquirer\";\nimport {\n  Context,\n  logError,\n  logFailure,\n  logFinishedStep,\n  logMessage,\n  oneoffContext,\n  showSpinner,\n} from \"../bundler/context.js\";\nimport {\n  fetchDeploymentCredentialsWithinCurrentProject,\n  deploymentSelectionFromOptions,\n  projectSelection,\n  storeAdminKeyEnvVar,\n} from \"./lib/api.js\";\nimport {\n  gitBranchFromEnvironment,\n  isNonProdBuildEnvironment,\n  suggestedEnvVarName,\n} from \"./lib/envvars.js\";\nimport { PushOptions, runPush } from \"./lib/push.js\";\nimport {\n  CONVEX_DEPLOY_KEY_ENV_VAR_NAME,\n  bigBrainAPI,\n  getConfiguredDeploymentName,\n  readAdminKeyFromEnvVar,\n} from \"./lib/utils.js\";\nimport { spawnSync } from \"child_process\";\nimport { runFunctionAndLog } from \"./lib/run.js\";\nimport { usageStateWarning } from \"./lib/usage.js\";\nimport {\n  deploymentTypeFromAdminKey,\n  getConfiguredDeploymentFromEnvVar,\n  isPreviewDeployKey,\n} from \"./lib/deployment.js\";\n\nexport const deploy = new Command(\"deploy\")\n  .summary(\"Deploy to your prod deployment\")\n  .description(\n    \"Deploy to your deployment. By default, this deploys to your prod deployment.\\n\\n\" +\n      \"Deploys to a preview deployment if the `CONVEX_DEPLOY_KEY` environment variable is set to a Preview Deploy Key.\",\n  )\n  .option(\"-v, --verbose\", \"Show full listing of changes\")\n  .option(\n    \"--dry-run\",\n    \"Print out the generated configuration without deploying to your Convex deployment\",\n  )\n  .option(\"-y, --yes\", \"Skip confirmation prompt when running locally\")\n  .addOption(\n    new Option(\n      \"--typecheck <mode>\",\n      `Whether to check TypeScript files with \\`tsc --noEmit\\` before deploying.`,\n    )\n      .choices([\"enable\", \"try\", \"disable\"] as const)\n      .default(\"try\" as const),\n  )\n  .addOption(\n    new Option(\n      \"--codegen <mode>\",\n      \"Whether to regenerate code in `convex/_generated/` before pushing.\",\n    )\n      .choices([\"enable\", \"disable\"] as const)\n      .default(\"enable\" as const),\n  )\n  .addOption(\n    new Option(\n      \"--cmd <command>\",\n      \"Command to run as part of deploying your app (e.g. `vite build`). This command can depend on the environment variables specified in `--cmd-url-env-var-name` being set.\",\n    ),\n  )\n  .addOption(\n    new Option(\n      \"--cmd-url-env-var-name <name>\",\n      \"Environment variable name to set Convex deployment URL (e.g. `VITE_CONVEX_URL`) when using `--cmd`\",\n    ),\n  )\n  .addOption(\n    new Option(\n      \"--preview-run <functionName>\",\n      \"Function to run if deploying to a preview deployment. This is ignored if deploying to a production deployment.\",\n    ),\n  )\n  .addOption(\n    new Option(\n      \"--preview-create <name>\",\n      \"The name to associate with this deployment if deploying to a newly created preview deployment. Defaults to the current Git branch name in Vercel, Netlify and Github CI. This is ignored if deploying to a production deployment.\",\n    ).conflicts(\"preview-name\"),\n  )\n  .addOption(\n    new Option(\n      \"--check-build-environment <mode>\",\n      \"Whether to check for a non-production build environment before deploying to a production Convex deployment.\",\n    )\n      .choices([\"enable\", \"disable\"] as const)\n      .default(\"enable\" as const)\n      .hideHelp(),\n  )\n  .addOption(new Option(\"--debug-bundle-path <path>\").hideHelp())\n  .addOption(new Option(\"--debug\").hideHelp())\n  // Hidden options to pass in admin key and url for tests and local development\n  .addOption(new Option(\"--admin-key <adminKey>\").hideHelp())\n  .addOption(new Option(\"--url <url>\").hideHelp())\n  .addOption(\n    new Option(\n      \"--preview-name <name>\",\n      \"[deprecated] Use `--preview-create` instead. The name to associate with this deployment if deploying to a preview deployment.\",\n    )\n      .hideHelp()\n      .conflicts(\"preview-create\"),\n  )\n  .showHelpAfterError()\n  .action(async (cmdOptions) => {\n    const ctx = oneoffContext;\n\n    storeAdminKeyEnvVar(cmdOptions.adminKey);\n    const configuredDeployKey = readAdminKeyFromEnvVar() ?? null;\n    if (\n      cmdOptions.checkBuildEnvironment === \"enable\" &&\n      isNonProdBuildEnvironment() &&\n      configuredDeployKey !== null &&\n      deploymentTypeFromAdminKey(configuredDeployKey) === \"prod\"\n    ) {\n      logError(\n        ctx,\n        `Detected a non-production build environment and \"${CONVEX_DEPLOY_KEY_ENV_VAR_NAME}\" for a production Convex deployment.\\n\n          This is probably unintentional.\n          `,\n      );\n      await ctx.crash(1);\n    }\n\n    await usageStateWarning(ctx);\n\n    if (\n      configuredDeployKey !== null &&\n      isPreviewDeployKey(configuredDeployKey)\n    ) {\n      if (cmdOptions.previewName !== undefined) {\n        logError(\n          ctx,\n          \"The `--preview-name` flag has been deprecated in favor of `--preview-create`. Please re-run the command using `--preview-create` instead.\",\n        );\n        await ctx.crash(1);\n      }\n      await deployToNewPreviewDeployment(ctx, {\n        ...cmdOptions,\n        configuredDeployKey,\n      });\n    } else {\n      await deployToExistingDeployment(ctx, cmdOptions);\n    }\n  });\n\nasync function deployToNewPreviewDeployment(\n  ctx: Context,\n  options: {\n    configuredDeployKey: string;\n    dryRun?: boolean | undefined;\n    previewCreate?: string | undefined;\n    previewRun?: string | undefined;\n    cmdUrlEnvVarName?: string | undefined;\n    cmd?: string | undefined;\n    verbose?: boolean | undefined;\n    typecheck: \"enable\" | \"try\" | \"disable\";\n    codegen: \"enable\" | \"disable\";\n\n    debug?: boolean | undefined;\n    debugBundlePath?: string | undefined;\n  },\n) {\n  const previewName = options.previewCreate ?? gitBranchFromEnvironment();\n  if (previewName === null) {\n    logError(\n      ctx,\n      \"`npx convex deploy` to a preview deployment could not determine the preview name. Provide one using `--preview-create`\",\n    );\n    await ctx.crash(1);\n  }\n\n  if (options.dryRun) {\n    logFinishedStep(\n      ctx,\n      `Would have claimed preview deployment for \"${previewName}\"`,\n    );\n    await runCommand(ctx, {\n      cmdUrlEnvVarName: options.cmdUrlEnvVarName,\n      cmd: options.cmd,\n      dryRun: !!options.dryRun,\n      url: \"https://<PREVIEW DEPLOYMENT>.convex.cloud\",\n    });\n    logFinishedStep(\n      ctx,\n      `Would have deployed Convex functions to preview deployment for \"${previewName}\"`,\n    );\n    if (options.previewRun !== undefined) {\n      logMessage(ctx, `Would have run function \"${options.previewRun}\"`);\n    }\n    return;\n  }\n\n  const data = await bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"claim_preview_deployment\",\n    data: {\n      projectSelection: await projectSelection(\n        ctx,\n        await getConfiguredDeploymentName(ctx),\n        options.configuredDeployKey,\n      ),\n      identifier: previewName,\n    },\n  });\n\n  const previewAdminKey = data.adminKey;\n  const previewUrl = data.instanceUrl;\n\n  await runCommand(ctx, { ...options, url: previewUrl });\n\n  const pushOptions: PushOptions = {\n    adminKey: previewAdminKey,\n    verbose: !!options.verbose,\n    dryRun: false,\n    typecheck: options.typecheck,\n    debug: !!options.debug,\n    debugBundlePath: options.debugBundlePath,\n    codegen: options.codegen === \"enable\",\n    url: previewUrl,\n  };\n  showSpinner(ctx, `Deploying to ${previewUrl}...`);\n  await runPush(oneoffContext, pushOptions);\n  logFinishedStep(ctx, `Deployed Convex functions to ${previewUrl}`);\n\n  if (options.previewRun !== undefined) {\n    await runFunctionAndLog(\n      ctx,\n      previewUrl,\n      previewAdminKey,\n      options.previewRun,\n      {},\n      {\n        onSuccess: () => {\n          logFinishedStep(\n            ctx,\n            `Finished running function \"${options.previewRun}\"`,\n          );\n        },\n      },\n    );\n  }\n}\n\nasync function deployToExistingDeployment(\n  ctx: Context,\n  options: {\n    verbose?: boolean | undefined;\n    dryRun?: boolean | undefined;\n    yes?: boolean | undefined;\n    typecheck: \"enable\" | \"try\" | \"disable\";\n    codegen: \"enable\" | \"disable\";\n    cmd?: string | undefined;\n    cmdUrlEnvVarName?: string | undefined;\n\n    debugBundlePath?: string | undefined;\n    debug?: boolean | undefined;\n    adminKey?: string | undefined;\n    url?: string | undefined;\n  },\n) {\n  const deploymentSelection = deploymentSelectionFromOptions({\n    ...options,\n    prod: true,\n  });\n  const { name: configuredDeploymentName, type: configuredDeploymentType } =\n    getConfiguredDeploymentFromEnvVar();\n  const { adminKey, url, deploymentName, deploymentType } =\n    await fetchDeploymentCredentialsWithinCurrentProject(\n      ctx,\n      deploymentSelection,\n    );\n  if (\n    deploymentSelection.kind !== \"deployKey\" &&\n    deploymentName !== undefined &&\n    deploymentType !== undefined &&\n    configuredDeploymentName !== null\n  ) {\n    const shouldPushToProd =\n      deploymentName === configuredDeploymentName ||\n      (options.yes ??\n        (await askToConfirmPush(\n          ctx,\n          {\n            configuredName: configuredDeploymentName,\n            configuredType: configuredDeploymentType,\n            requestedName: deploymentName,\n            requestedType: deploymentType,\n          },\n          url,\n        )));\n    if (!shouldPushToProd) {\n      await ctx.crash(1);\n    }\n  }\n\n  await runCommand(ctx, { ...options, url });\n\n  const pushOptions: PushOptions = {\n    adminKey,\n    verbose: !!options.verbose,\n    dryRun: !!options.dryRun,\n    typecheck: options.typecheck,\n    debug: !!options.debug,\n    debugBundlePath: options.debugBundlePath,\n    codegen: options.codegen === \"enable\",\n    url,\n  };\n  showSpinner(\n    ctx,\n    `Deploying to ${url}...${options.dryRun ? \" [dry run]\" : \"\"}`,\n  );\n  await runPush(oneoffContext, pushOptions);\n  logFinishedStep(\n    ctx,\n    `${\n      options.dryRun ? \"Would have deployed\" : \"Deployed\"\n    } Convex functions to ${url}`,\n  );\n}\n\nasync function runCommand(\n  ctx: Context,\n  options: {\n    cmdUrlEnvVarName?: string | undefined;\n    cmd?: string | undefined;\n    dryRun?: boolean | undefined;\n    url: string;\n  },\n) {\n  if (options.cmd === undefined) {\n    return;\n  }\n\n  const urlVar =\n    options.cmdUrlEnvVarName ?? (await suggestedEnvVarName(ctx)).envVar;\n  showSpinner(\n    ctx,\n    `Running '${options.cmd}' with environment variable \"${urlVar}\" set...${\n      options.dryRun ? \" [dry run]\" : \"\"\n    }`,\n  );\n  if (!options.dryRun) {\n    const env = { ...process.env };\n    env[urlVar] = options.url;\n    const result = spawnSync(options.cmd, {\n      env,\n      stdio: \"inherit\",\n      shell: true,\n    });\n    if (result.status !== 0) {\n      logFailure(ctx, `'${options.cmd}' failed`);\n      await ctx.crash(1);\n    }\n  }\n  logFinishedStep(\n    ctx,\n    `${options.dryRun ? \"Would have run\" : \"Ran\"} \"${\n      options.cmd\n    }\" with environment variable \"${urlVar}\" set`,\n  );\n}\n\nasync function askToConfirmPush(\n  ctx: Context,\n  deployment: {\n    configuredName: string;\n    configuredType: string | null;\n    requestedName: string;\n    requestedType: string;\n  },\n  prodUrl: string,\n) {\n  logMessage(\n    ctx,\n    `\\\nYou're currently developing against your ${chalk.bold(\n      deployment.configuredType ?? \"dev\",\n    )} deployment\n\n  ${deployment.configuredName} (set in CONVEX_DEPLOYMENT)\n\nYour ${chalk.bold(deployment.requestedType)} deployment ${chalk.bold(\n      deployment.requestedName,\n    )} serves traffic at:\n\n  ${(await suggestedEnvVarName(ctx)).envVar}=${chalk.bold(prodUrl)}\n\nMake sure that your published client is configured with this URL (for instructions see https://docs.convex.dev/hosting)\\n`,\n  );\n  return (\n    await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"shouldPush\",\n        message: `Do you want to push your code to your ${deployment.requestedType} deployment ${deployment.requestedName} now?`,\n        default: true,\n      },\n    ])\n  ).shouldPush;\n}\n"],
  "mappings": "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",
  "names": ["chalk", "inquirer"]
}
