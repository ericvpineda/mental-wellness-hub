{
  "version": 3,
  "sources": ["../../../src/cli/data.ts"],
  "sourcesContent": ["import { Option } from \"@commander-js/extra-typings\";\nimport chalk from \"chalk\";\nimport {\n  Context,\n  logError,\n  logOutput,\n  logWarning,\n  oneoffContext,\n} from \"../bundler/context.js\";\nimport { Base64 } from \"../values/index.js\";\nimport { Value } from \"../values/value.js\";\nimport {\n  deploymentSelectionFromOptions,\n  fetchDeploymentCredentialsProvisionProd,\n} from \"./lib/api.js\";\nimport { runPaginatedQuery } from \"./lib/run.js\";\nimport { parsePositiveInteger } from \"./lib/utils.js\";\nimport { Command } from \"@commander-js/extra-typings\";\nimport { actionDescription } from \"./lib/command.js\";\n\nexport const data = new Command(\"data\")\n  .summary(\"List tables and print data from your database\")\n  .description(\n    \"Inspect your Convex deployment's database.\\n\\n\" +\n      \"  List tables: `npx convex data`\\n\" +\n      \"  List documents in a table: `npx convex data tableName`\\n\\n\" +\n      \"By default, this inspects your dev deployment.\",\n  )\n  .argument(\"[table]\", \"If specified, list documents in this table.\")\n  .addOption(\n    new Option(\n      \"--limit <n>\",\n      \"List only the `n` the most recently created documents.\",\n    )\n      .default(100)\n      .argParser(parsePositiveInteger),\n  )\n  .addOption(\n    new Option(\n      \"--order <choice>\",\n      \"Order the documents by their `_creationTime`.\",\n    )\n      .choices([\"asc\", \"desc\"])\n      .default(\"desc\"),\n  )\n  .addDeploymentSelectionOptions(actionDescription(\"Inspect the database in\"))\n  .showHelpAfterError()\n  .action(async (tableName, options) => {\n    const ctx = oneoffContext;\n    const deploymentSelection = deploymentSelectionFromOptions(options);\n\n    const {\n      adminKey,\n      url: deploymentUrl,\n      deploymentName,\n    } = await fetchDeploymentCredentialsProvisionProd(ctx, deploymentSelection);\n\n    if (tableName !== undefined) {\n      await listDocuments(ctx, deploymentUrl, adminKey, tableName, {\n        ...options,\n        order: options.order as \"asc\" | \"desc\",\n      });\n    } else {\n      await listTables(ctx, deploymentUrl, adminKey, deploymentName);\n    }\n  });\n\nasync function listTables(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  deploymentName: string | undefined,\n) {\n  const tables = (await runPaginatedQuery(\n    ctx,\n    deploymentUrl,\n    adminKey,\n    \"_system/cli/tables\",\n    {},\n  )) as { name: string }[];\n  if (tables.length === 0) {\n    logError(\n      ctx,\n      `There are no tables in the ${\n        deploymentName ? `${chalk.bold(deploymentName)} deployment's ` : \"\"\n      }database.`,\n    );\n    return;\n  }\n  const tableNames = tables.map((table) => table.name);\n  tableNames.sort();\n  logOutput(ctx, tableNames.join(\"\\n\"));\n}\n\nasync function listDocuments(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  tableName: string,\n  options: {\n    limit: number;\n    order: \"asc\" | \"desc\";\n  },\n) {\n  const data = (await runPaginatedQuery(\n    ctx,\n    deploymentUrl,\n    adminKey,\n    \"_system/cli/tableData\",\n    {\n      table: tableName,\n      order: options.order ?? \"desc\",\n    },\n    options.limit + 1,\n  )) as Record<string, Value>[];\n\n  if (data.length === 0) {\n    logError(ctx, \"There are no documents in this table.\");\n    return;\n  }\n\n  logDocumentsTable(\n    ctx,\n    data.slice(0, options.limit).map((document) => {\n      const printed: Record<string, string> = {};\n      for (const key in document) {\n        printed[key] = stringify(document[key]);\n      }\n      return printed;\n    }),\n  );\n  if (data.length > options.limit) {\n    logWarning(\n      ctx,\n      chalk.yellow(\n        `Showing the ${options.limit} ${\n          options.order === \"desc\" ? \"most recently\" : \"oldest\"\n        } created document${\n          options.limit > 1 ? \"s\" : \"\"\n        }. Use the --limit option to see more.`,\n      ),\n    );\n  }\n}\n\nfunction logDocumentsTable(ctx: Context, rows: Record<string, string>[]) {\n  const columnsToWidths: Record<string, number> = {};\n  for (const row of rows) {\n    for (const column in row) {\n      const value = row[column];\n      columnsToWidths[column] = Math.max(\n        value.length,\n        columnsToWidths[column] ?? 0,\n      );\n    }\n  }\n  const unsortedFields = Object.keys(columnsToWidths);\n  unsortedFields.sort();\n  const fields = Array.from(\n    new Set([\"_id\", \"_creationTime\", ...unsortedFields]),\n  );\n  const columnWidths = fields.map((field) => columnsToWidths[field]);\n  const lineLimit = process.stdout.isTTY ? process.stdout.columns : undefined;\n\n  let didTruncate = false;\n\n  function limitLine(line: string, limit: number | undefined) {\n    if (limit === undefined) {\n      return line;\n    }\n    const limitWithBufferForUnicode = limit - 10;\n    if (line.length > limitWithBufferForUnicode) {\n      didTruncate = true;\n    }\n    return line.slice(0, limitWithBufferForUnicode);\n  }\n\n  logOutput(\n    ctx,\n    limitLine(\n      fields.map((field, i) => field.padEnd(columnWidths[i])).join(\" | \"),\n      lineLimit,\n    ),\n  );\n  logOutput(\n    ctx,\n    limitLine(\n      columnWidths.map((width) => \"-\".repeat(width)).join(\"-|-\"),\n      lineLimit,\n    ),\n  );\n  for (const row of rows) {\n    logOutput(\n      ctx,\n      limitLine(\n        fields\n          .map((field, i) => (row[field] ?? \"\").padEnd(columnWidths[i]))\n          .join(\" | \"),\n        lineLimit,\n      ),\n    );\n  }\n  if (didTruncate) {\n    logWarning(\n      ctx,\n      chalk.yellow(\n        \"Lines were truncated to fit the terminal width. Pipe the command to see \" +\n          \"the full output, such as:\\n  `npx convex data tableName | less -S`\",\n      ),\n    );\n  }\n}\n\nfunction stringify(value: Value): string {\n  if (value === null) {\n    return \"null\";\n  }\n  if (typeof value === \"bigint\") {\n    return `${value.toString()}n`;\n  }\n  if (typeof value === \"number\") {\n    return value.toString();\n  }\n  if (typeof value === \"boolean\") {\n    return value.toString();\n  }\n  if (typeof value === \"string\") {\n    return JSON.stringify(value);\n  }\n  if (value instanceof ArrayBuffer) {\n    const base64Encoded = Base64.fromByteArray(new Uint8Array(value));\n    return `Bytes(\"${base64Encoded}\")`;\n  }\n  if (value instanceof Array) {\n    return `[${value.map(stringify).join(\", \")}]`;\n  }\n  const pairs = Object.entries(value)\n    .map(([k, v]) => `\"${k}\": ${stringify(v!)}`)\n    .join(\", \");\n  return `{ ${pairs} }`;\n}\n"],
  "mappings": "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",
  "names": ["import_extra_typings", "chalk", "data"]
}
