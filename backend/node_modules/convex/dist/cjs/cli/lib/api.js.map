{
  "version": 3,
  "sources": ["../../../../src/cli/lib/api.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Context, logError, logFailure } from \"../../bundler/context.js\";\nimport {\n  deploymentNameFromAdminKeyOrCrash,\n  deploymentTypeFromAdminKey,\n  getConfiguredDeploymentFromEnvVar,\n  getTeamAndProjectFromPreviewAdminKey,\n  isPreviewDeployKey,\n} from \"./deployment.js\";\nimport { buildEnvironment } from \"./envvars.js\";\nimport { checkAuthorization, performLogin } from \"./login.js\";\nimport {\n  CONVEX_DEPLOY_KEY_ENV_VAR_NAME,\n  bigBrainAPI,\n  bigBrainAPIMaybeThrows,\n  getAuthHeaderForBigBrain,\n  getConfiguredDeploymentName,\n  getConfiguredDeploymentOrCrash,\n  logAndHandleFetchError,\n  readAdminKeyFromEnvVar,\n} from \"./utils.js\";\n\nexport type DeploymentName = string;\nexport type DeploymentType = \"dev\" | \"prod\";\n\nexport type Project = {\n  id: string;\n  name: string;\n  slug: string;\n  isDemo: boolean;\n};\n\ntype AdminKey = string;\n\n// Init\n// Provision a new empty project and return the new deployment credentials.\nexport async function createProjectProvisioningDevOrProd(\n  ctx: Context,\n  {\n    teamSlug: selectedTeamSlug,\n    projectName,\n  }: { teamSlug: string; projectName: string },\n  firstDeploymentType: DeploymentType,\n): Promise<{\n  projectSlug: string;\n  teamSlug: string;\n  deploymentName: string;\n  url: string;\n  adminKey: AdminKey;\n  projectsRemaining: number;\n}> {\n  const provisioningArgs = {\n    team: selectedTeamSlug,\n    projectName,\n    deploymentType: firstDeploymentType,\n    backendVersionOverride: process.env.CONVEX_BACKEND_VERSION_OVERRIDE,\n  };\n  const data = await bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"create_project\",\n    data: provisioningArgs,\n  });\n  const {\n    projectSlug,\n    teamSlug,\n    deploymentName,\n    adminKey,\n    projectsRemaining,\n    prodUrl: url,\n  } = data;\n  if (\n    projectSlug === undefined ||\n    teamSlug === undefined ||\n    deploymentName === undefined ||\n    url === undefined ||\n    adminKey === undefined ||\n    projectsRemaining === undefined\n  ) {\n    const error =\n      \"Unexpected response during provisioning: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(error));\n    return await ctx.crash(1, \"transient\", error);\n  }\n  return {\n    projectSlug,\n    teamSlug,\n    deploymentName,\n    url,\n    adminKey,\n    projectsRemaining,\n  };\n}\n\n// Reinit\nexport async function fetchDeploymentCredentialsProvisioningDevOrProd(\n  ctx: Context,\n  { teamSlug, projectSlug }: { teamSlug: string; projectSlug: string },\n  deploymentType: DeploymentType,\n): Promise<{\n  deploymentName: string | undefined;\n  url: string;\n  adminKey: AdminKey;\n}> {\n  try {\n    return fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n      ctx,\n      { teamSlug, projectSlug },\n      deploymentType,\n    );\n  } catch (error: unknown) {\n    return await logAndHandleFetchError(ctx, error);\n  }\n}\n\n// Dev\nexport async function fetchDeploymentCredentialsForName(\n  ctx: Context,\n  deploymentName: DeploymentName,\n  deploymentType: DeploymentType,\n): Promise<\n  | {\n      deploymentName: string;\n      adminKey: string;\n      url: string;\n      deploymentType: DeploymentType;\n    }\n  | { error: unknown }\n> {\n  let data;\n  try {\n    data = await bigBrainAPIMaybeThrows({\n      ctx,\n      method: \"POST\",\n      url: \"deployment/authorize_for_name\",\n      data: {\n        deploymentName,\n        deploymentType,\n      },\n    });\n  } catch (error: unknown) {\n    return { error };\n  }\n  const adminKey: string = data.adminKey;\n  const url: string = data.url;\n  const resultDeploymentType: DeploymentType = data.deploymentType;\n  if (adminKey === undefined || url === undefined) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(msg));\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n  return {\n    deploymentName,\n    adminKey,\n    url,\n    deploymentType: resultDeploymentType,\n  };\n}\n\nexport type DeploymentSelection =\n  | { kind: \"deployKey\" }\n  | { kind: \"previewName\"; previewName: string }\n  | { kind: \"deploymentName\"; deploymentName: string }\n  | { kind: \"ownProd\" }\n  | { kind: \"ownDev\" }\n  | { kind: \"urlWithAdminKey\"; url: string; adminKey: string }\n  | { kind: \"urlWithLogin\"; url: string };\n\nexport function storeAdminKeyEnvVar(adminKeyOption?: string | null) {\n  if (adminKeyOption) {\n    // So we don't have to worry about passing through the admin key everywhere\n    // if it's explicitly overridden by a CLI option, override the env variable\n    // directly.\n    process.env[CONVEX_DEPLOY_KEY_ENV_VAR_NAME] = adminKeyOption;\n  }\n}\n\nexport type DeploymentSelectionOptions = {\n  // Whether to default to prod\n  prod?: boolean | undefined;\n\n  previewName?: string | undefined;\n  deploymentName?: string | undefined;\n  url?: string | undefined;\n  adminKey?: string | undefined;\n};\n\nexport function deploymentSelectionFromOptions(\n  options: DeploymentSelectionOptions,\n): DeploymentSelection {\n  storeAdminKeyEnvVar(options.adminKey);\n  const adminKey = readAdminKeyFromEnvVar();\n  if (options.url !== undefined) {\n    if (adminKey) {\n      return { kind: \"urlWithAdminKey\", url: options.url, adminKey };\n    }\n    return { kind: \"urlWithLogin\", url: options.url };\n  }\n  if (options.previewName !== undefined) {\n    return { kind: \"previewName\", previewName: options.previewName };\n  }\n  if (options.deploymentName !== undefined) {\n    return { kind: \"deploymentName\", deploymentName: options.deploymentName };\n  }\n  if (adminKey !== undefined) {\n    return { kind: \"deployKey\" };\n  }\n  return { kind: options.prod === true ? \"ownProd\" : \"ownDev\" };\n}\n\n// Deploy\nexport async function fetchDeploymentCredentialsWithinCurrentProject(\n  ctx: Context,\n  deploymentSelection: DeploymentSelection,\n): Promise<{\n  url: string;\n  adminKey: AdminKey;\n  deploymentName?: string;\n  deploymentType?: string | undefined;\n}> {\n  if (deploymentSelection.kind === \"urlWithAdminKey\") {\n    return {\n      adminKey: deploymentSelection.adminKey,\n      url: deploymentSelection.url,\n    };\n  }\n\n  const configuredAdminKey = readAdminKeyFromEnvVar();\n\n  // Crash if we know that DEPLOY_KEY (adminKey) is required\n  if (configuredAdminKey === undefined) {\n    const buildEnvironmentExpectsConvexDeployKey = buildEnvironment();\n    if (buildEnvironmentExpectsConvexDeployKey) {\n      logFailure(\n        ctx,\n        `${buildEnvironmentExpectsConvexDeployKey} build environment detected but ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} is not set. ` +\n          `Set this environment variable to deploy from this environment. See https://docs.convex.dev/production/hosting`,\n      );\n      await ctx.crash(1);\n    }\n    const header = await getAuthHeaderForBigBrain(ctx);\n    if (!header) {\n      logFailure(\n        ctx,\n        `Error: You are not logged in. Log in with \\`npx convex dev\\` or set the ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} environment variable. ` +\n          `See https://docs.convex.dev/production/hosting`,\n      );\n      await ctx.crash(1);\n    }\n    const configuredDeployment = await getConfiguredDeploymentName(ctx);\n    if (configuredDeployment === null) {\n      logFailure(\n        ctx,\n        \"No CONVEX_DEPLOYMENT set, run `npx convex dev` to configure a Convex project\",\n      );\n      await ctx.crash(1);\n    }\n  }\n\n  const data = await fetchDeploymentCredentialsWithinCurrentProjectInner(\n    ctx,\n    deploymentSelection,\n    configuredAdminKey,\n  );\n  const { deploymentName, adminKey, deploymentType, url } = data;\n  if (\n    adminKey === undefined ||\n    url === undefined ||\n    deploymentName === undefined\n  ) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(msg));\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n  return {\n    deploymentName,\n    adminKey,\n    url,\n    deploymentType,\n  };\n}\n\ntype ProjectSelection =\n  | {\n      kind: \"deploymentName\";\n      // Identify a project by one of the deployments in it.\n      deploymentName: string;\n    }\n  | {\n      kind: \"teamAndProjectSlugs\";\n      // Identify a project by its team and slug.\n      teamSlug: string;\n      projectSlug: string;\n    };\n\nexport async function projectSelection(\n  ctx: Context,\n  configuredDeployment: string | null,\n  configuredAdminKey: string | undefined,\n): Promise<ProjectSelection> {\n  if (\n    configuredAdminKey !== undefined &&\n    isPreviewDeployKey(configuredAdminKey)\n  ) {\n    const { teamSlug, projectSlug } =\n      await getTeamAndProjectFromPreviewAdminKey(ctx, configuredAdminKey);\n    return {\n      kind: \"teamAndProjectSlugs\",\n      teamSlug,\n      projectSlug,\n    };\n  }\n  if (configuredAdminKey !== undefined) {\n    return {\n      kind: \"deploymentName\",\n      deploymentName: await deploymentNameFromAdminKeyOrCrash(\n        ctx,\n        configuredAdminKey,\n      ),\n    };\n  }\n  if (configuredDeployment) {\n    return {\n      kind: \"deploymentName\",\n      deploymentName: configuredDeployment,\n    };\n  }\n  logFailure(\n    ctx,\n    \"Select project by setting `CONVEX_DEPLOYMENT` with `npx convex dev` or `CONVEX_DEPLOY_KEY` from the Convex dashboard.\",\n  );\n  return await ctx.crash(1);\n}\n\nasync function fetchDeploymentCredentialsWithinCurrentProjectInner(\n  ctx: Context,\n  deploymentSelection: Exclude<\n    DeploymentSelection,\n    { kind: \"urlWithAdminKey\"; url: string; adminKey: string }\n  >,\n  configuredAdminKey: string | undefined,\n): Promise<{\n  deploymentName?: string;\n  adminKey?: string;\n  url?: string;\n  deploymentType?: string;\n}> {\n  const configuredDeployment = getConfiguredDeploymentFromEnvVar().name;\n  switch (deploymentSelection.kind) {\n    case \"ownDev\": {\n      return {\n        ...(await fetchExistingDevDeploymentCredentialsOrCrash(\n          ctx,\n          configuredDeployment!,\n        )),\n        deploymentName: configuredDeployment!,\n      };\n    }\n    case \"ownProd\":\n      return await bigBrainAPI({\n        ctx,\n        method: \"POST\",\n        url: \"deployment/authorize_prod\",\n        data: {\n          deploymentName: configuredDeployment,\n        },\n      });\n    case \"previewName\":\n      return await bigBrainAPI({\n        ctx,\n        method: \"POST\",\n        url: \"deployment/authorize_preview\",\n        data: {\n          previewName: deploymentSelection.previewName,\n          projectSelection: await projectSelection(\n            ctx,\n            configuredDeployment,\n            configuredAdminKey,\n          ),\n        },\n      });\n    case \"deploymentName\":\n      return await bigBrainAPI({\n        ctx,\n        method: \"POST\",\n        url: \"deployment/authorize_within_current_project\",\n        data: {\n          selectedDeploymentName: deploymentSelection.deploymentName,\n          projectSelection: await projectSelection(\n            ctx,\n            configuredDeployment,\n            configuredAdminKey,\n          ),\n        },\n      });\n    case \"deployKey\": {\n      const deploymentName = await deploymentNameFromAdminKeyOrCrash(\n        ctx,\n        configuredAdminKey!,\n      );\n      let url = await deriveUrlFromAdminKey(ctx, configuredAdminKey!);\n      // We cannot derive the deployment URL from the deploy key\n      // when running against local big brain, so use the name to get the URL.\n      if (process.env.CONVEX_PROVISION_HOST !== undefined) {\n        url = await bigBrainAPI({\n          ctx,\n          method: \"POST\",\n          url: \"deployment/url_for_key\",\n          data: {\n            deployKey: configuredAdminKey,\n          },\n        });\n      }\n      const deploymentType = deploymentTypeFromAdminKey(configuredAdminKey!);\n      return {\n        adminKey: configuredAdminKey,\n        url,\n        deploymentName,\n        deploymentType,\n      };\n    }\n    case \"urlWithLogin\":\n      return {\n        ...(await bigBrainAPI({\n          ctx,\n          method: \"POST\",\n          url: \"deployment/authorize_within_current_project\",\n          data: {\n            selectedDeploymentName: configuredDeployment,\n            projectSelection: await projectSelection(\n              ctx,\n              configuredDeployment,\n              configuredAdminKey,\n            ),\n          },\n        })),\n        url: deploymentSelection.url,\n      };\n    default: {\n      const _exhaustivenessCheck: never = deploymentSelection;\n      return ctx.crash(1);\n    }\n  }\n}\n\n// Run, Import\nexport async function fetchDeploymentCredentialsProvisionProd(\n  ctx: Context,\n  deploymentSelection: DeploymentSelection,\n): Promise<{\n  url: string;\n  adminKey: AdminKey;\n  deploymentName?: string;\n  deploymentType?: string;\n}> {\n  if (\n    deploymentSelection.kind === \"ownDev\" &&\n    !(await checkAuthorization(ctx, false))\n  ) {\n    await performLogin(ctx);\n  }\n\n  if (deploymentSelection.kind !== \"ownDev\") {\n    const result = await fetchDeploymentCredentialsWithinCurrentProject(\n      ctx,\n      deploymentSelection,\n    );\n    return {\n      url: result.url,\n      adminKey: result.adminKey,\n      deploymentName: result.deploymentName,\n      deploymentType: result.deploymentType,\n    };\n  }\n\n  const configuredDeployment = await getConfiguredDeploymentOrCrash(ctx);\n  const result = await fetchExistingDevDeploymentCredentialsOrCrash(\n    ctx,\n    configuredDeployment,\n  );\n  return {\n    url: result.url,\n    adminKey: result.adminKey,\n    deploymentType: result.deploymentType,\n    deploymentName: configuredDeployment,\n  };\n}\n\nexport async function fetchTeamAndProject(\n  ctx: Context,\n  deploymentName: string,\n) {\n  const data = (await bigBrainAPI({\n    ctx,\n    method: \"GET\",\n    url: `deployment/${deploymentName}/team_and_project`,\n  })) as {\n    team: string; // slug\n    project: string; // slug\n    teamId: number;\n    projectId: number;\n  };\n\n  const { team, project } = data;\n  if (team === undefined || project === undefined) {\n    const msg =\n      \"Unknown error when fetching team and project: \" + JSON.stringify(data);\n    logFailure(ctx, msg);\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n\n  return data;\n}\n\n// Used by dev for upgrade from team and project in convex.json to CONVEX_DEPLOYMENT\nexport async function fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n  ctx: Context,\n  { teamSlug, projectSlug }: { teamSlug: string; projectSlug: string },\n  deploymentType: DeploymentType,\n): Promise<{\n  deploymentName: string | undefined;\n  url: string;\n  adminKey: AdminKey;\n}> {\n  const data = await bigBrainAPIMaybeThrows({\n    ctx,\n    method: \"POST\",\n    url: \"deployment/provision_and_authorize\",\n    data: {\n      teamSlug,\n      projectSlug,\n      deploymentType,\n    },\n  });\n  const deploymentName = data.deploymentName;\n  const adminKey = data.adminKey;\n  const url = data.url;\n  if (adminKey === undefined || url === undefined) {\n    const msg = \"Unknown error during authorization: \" + JSON.stringify(data);\n    logError(ctx, chalk.red(msg));\n    return await ctx.crash(1, \"transient\", new Error(msg));\n  }\n  return { adminKey, url, deploymentName };\n}\n\ntype Credentials = {\n  url: string;\n  adminKey: AdminKey;\n  deploymentType: DeploymentType;\n};\n\ntype DevCredentials = Credentials & {\n  deploymentType: \"dev\";\n};\n\nfunction credentialsAsDevCredentials(cred: Credentials): DevCredentials {\n  if (cred.deploymentType === \"dev\") {\n    return cred as DevCredentials;\n  }\n  // Getting this wrong is a programmer error.\n  // eslint-disable-next-line no-restricted-syntax\n  throw new Error(\"Credentials are not for a dev deployment.\");\n}\n\nasync function fetchExistingDevDeploymentCredentialsOrCrash(\n  ctx: Context,\n  deploymentName: DeploymentName,\n): Promise<DevCredentials> {\n  const credentials = await fetchDeploymentCredentialsForName(\n    ctx,\n    deploymentName,\n    \"dev\",\n  );\n  if (\"error\" in credentials) {\n    logFailure(\n      ctx,\n      `Failed to authorize \"${deploymentName}\" configured in CONVEX_DEPLOYMENT, run \\`npx convex dev\\` to configure a Convex project`,\n    );\n    return await ctx.crash(1, \"invalid filesystem data\", credentials.error);\n  }\n  if (credentials.deploymentType !== \"dev\") {\n    logFailure(ctx, `Deployment \"${deploymentName}\" is not a dev deployment`);\n    return await ctx.crash(1, \"invalid filesystem data\");\n  }\n  return credentialsAsDevCredentials(credentials);\n}\n\n// This returns the the url of the deployment from an admin key in the format\n//      \"tall-forest-1234|1a2b35123541\"\n//   or \"prod:tall-forest-1234|1a2b35123541\"\nasync function deriveUrlFromAdminKey(ctx: Context, adminKey: string) {\n  const deploymentName = await deploymentNameFromAdminKeyOrCrash(ctx, adminKey);\n  return `https://${deploymentName}.convex.cloud`;\n}\n"],
  "mappings": "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",
  "names": ["chalk", "result"]
}
