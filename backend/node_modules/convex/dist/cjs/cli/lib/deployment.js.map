{
  "version": 3,
  "sources": ["../../../../src/cli/lib/deployment.ts"],
  "sourcesContent": ["import * as dotenv from \"dotenv\";\nimport { Context, logFailure } from \"../../bundler/context.js\";\nimport { changedEnvVarFile, getEnvVarRegex } from \"./envvars.js\";\nimport {\n  CONVEX_DEPLOY_KEY_ENV_VAR_NAME,\n  readAdminKeyFromEnvVar,\n} from \"./utils.js\";\n\nconst ENV_VAR_FILE_PATH = \".env.local\";\nexport const CONVEX_DEPLOYMENT_VAR_NAME = \"CONVEX_DEPLOYMENT\";\n\n// Return the \"target\" deployment name, from admin key or from CONVEX_DEPLOYMENT.\n// Admin key is set either via a CLI option or via CONVEX_DEPLOY_KEY\nexport function getTargetDeploymentName() {\n  return (\n    getDeploymentNameFromAdminKey() ?? getConfiguredDeploymentFromEnvVar().name\n  );\n}\n\nexport function getConfiguredDeploymentFromEnvVar(): {\n  type: \"dev\" | \"prod\" | \"preview\" | null;\n  name: string | null;\n} {\n  dotenv.config({ path: ENV_VAR_FILE_PATH });\n  dotenv.config();\n  const raw = process.env[CONVEX_DEPLOYMENT_VAR_NAME] ?? null;\n  if (raw === null || raw === \"\") {\n    return { type: null, name: null };\n  }\n  const name = stripDeploymentTypePrefix(raw);\n  const type = getDeploymentTypeFromConfiguredDeployment(raw);\n  return { type, name };\n}\n\n// Given a deployment string like \"dev:tall-forest-1234\"\n// returns only the slug \"tall-forest-1234\".\n// If there's no prefix returns the original string.\nexport function stripDeploymentTypePrefix(deployment: string) {\n  return deployment.split(\":\").at(-1)!;\n}\n\n// Handling legacy CONVEX_DEPLOYMENT without type prefix as well\nfunction getDeploymentTypeFromConfiguredDeployment(raw: string) {\n  const typeRaw = raw.split(\":\")[0];\n  const type =\n    typeRaw === \"prod\" || typeRaw === \"dev\" || typeRaw === \"preview\"\n      ? typeRaw\n      : null;\n  return type;\n}\n\nexport async function writeDeploymentEnvVar(\n  ctx: Context,\n  deploymentType: \"dev\" | \"prod\",\n  deployment: { team: string; project: string; deploymentName: string },\n): Promise<{ wroteToGitIgnore: boolean }> {\n  const existingFile = ctx.fs.exists(ENV_VAR_FILE_PATH)\n    ? ctx.fs.readUtf8File(ENV_VAR_FILE_PATH)\n    : null;\n  const changedFile = changesToEnvVarFile(\n    existingFile,\n    deploymentType,\n    deployment,\n  );\n  // Also update process.env directly, because `dotfile.config()` doesn't pick\n  // up changes to the file.\n  process.env[CONVEX_DEPLOYMENT_VAR_NAME] =\n    deploymentType + \":\" + deployment.deploymentName;\n  if (changedFile !== null) {\n    ctx.fs.writeUtf8File(ENV_VAR_FILE_PATH, changedFile);\n    // Only do this if we're not reinitializing an existing setup\n    return { wroteToGitIgnore: await gitIgnoreEnvVarFile(ctx) };\n  }\n  return { wroteToGitIgnore: false };\n}\n\n// Only used in the internal --url flow\nexport async function eraseDeploymentEnvVar(ctx: Context): Promise<boolean> {\n  const existingFile = ctx.fs.exists(ENV_VAR_FILE_PATH)\n    ? ctx.fs.readUtf8File(ENV_VAR_FILE_PATH)\n    : null;\n  if (existingFile === null) {\n    return false;\n  }\n  const config = dotenv.parse(existingFile);\n  const existing = config[CONVEX_DEPLOYMENT_VAR_NAME];\n  if (existing === undefined) {\n    return false;\n  }\n  const changedFile = existingFile.replace(\n    getEnvVarRegex(CONVEX_DEPLOYMENT_VAR_NAME),\n    \"\",\n  );\n  ctx.fs.writeUtf8File(ENV_VAR_FILE_PATH, changedFile);\n  return true;\n}\n\nasync function gitIgnoreEnvVarFile(ctx: Context): Promise<boolean> {\n  const gitIgnorePath = \".gitignore\";\n  const gitIgnoreContents = ctx.fs.exists(gitIgnorePath)\n    ? ctx.fs.readUtf8File(gitIgnorePath)\n    : \"\";\n  const changedGitIgnore = changesToGitIgnore(gitIgnoreContents);\n  if (changedGitIgnore !== null) {\n    ctx.fs.writeUtf8File(gitIgnorePath, changedGitIgnore);\n    return true;\n  }\n  return false;\n}\n\n// exported for tests\nexport function changesToEnvVarFile(\n  existingFile: string | null,\n  deploymentType: \"dev\" | \"prod\",\n  {\n    team,\n    project,\n    deploymentName,\n  }: { team: string; project: string; deploymentName: string },\n): string | null {\n  const deploymentValue = deploymentType + \":\" + deploymentName;\n  const commentOnPreviousLine = \"# Deployment used by `npx convex dev`\";\n  const commentAfterValue = `team: ${team}, project: ${project}`;\n  return changedEnvVarFile(\n    existingFile,\n    CONVEX_DEPLOYMENT_VAR_NAME,\n    deploymentValue,\n    commentAfterValue,\n    commentOnPreviousLine,\n  );\n}\n\n// exported for tests\nexport function changesToGitIgnore(existingFile: string | null): string | null {\n  if (existingFile === null) {\n    return `${ENV_VAR_FILE_PATH}\\n`;\n  }\n  const gitIgnoreLines = existingFile.split(\"\\n\");\n  const envVarFileIgnored = gitIgnoreLines.some(\n    (line) =>\n      line === \".env.local\" ||\n      line === \".env.*\" ||\n      line === \".env*\" ||\n      line === \"*.local\" ||\n      line === \".env*.local\",\n  );\n  if (!envVarFileIgnored) {\n    return `${existingFile}\\n${ENV_VAR_FILE_PATH}\\n`;\n  } else {\n    return null;\n  }\n}\n\nexport function getDeploymentNameFromAdminKey() {\n  const adminKey = readAdminKeyFromEnvVar();\n  if (adminKey === undefined) {\n    return null;\n  }\n  return deploymentNameFromAdminKey(adminKey);\n}\n\nexport async function deploymentNameFromAdminKeyOrCrash(\n  ctx: Context,\n  adminKey: string,\n) {\n  const deploymentName = deploymentNameFromAdminKey(adminKey);\n  if (deploymentName === null) {\n    logFailure(\n      ctx,\n      `Please set ${CONVEX_DEPLOY_KEY_ENV_VAR_NAME} to a new key which you can find on your Convex dashboard.`,\n    );\n    return await ctx.crash(1);\n  }\n  return deploymentName;\n}\n\nfunction deploymentNameFromAdminKey(adminKey: string) {\n  const parts = adminKey.split(\"|\");\n  if (parts.length === 1) {\n    return null;\n  }\n  if (isPreviewDeployKey(adminKey)) {\n    // Preview deploy keys do not contain a deployment name.\n    return null;\n  }\n  return stripDeploymentTypePrefix(parts[0]);\n}\n\n// Needed to differentiate a preview deploy key\n// from a concrete preview deployment's deploy key.\n// preview deploy key: `preview:team:project|key`\n// preview deployment's deploy key: `preview:deploymentName|key`\nexport function isPreviewDeployKey(adminKey: string) {\n  const parts = adminKey.split(\"|\");\n  if (parts.length === 1) {\n    return false;\n  }\n  const [prefix] = parts;\n  const prefixParts = prefix.split(\":\");\n  return prefixParts[0] === \"preview\" && prefixParts.length === 3;\n}\n\n// For current keys returns prod|dev|preview,\n// for legacy keys returns \"prod\".\n// Examples:\n//  \"prod:deploymentName|key\" -> \"prod\"\n//  \"preview:deploymentName|key\" -> \"preview\"\n//  \"dev:deploymentName|key\" -> \"dev\"\n//  \"key\" -> \"prod\"\nexport function deploymentTypeFromAdminKey(adminKey: string) {\n  const parts = adminKey.split(\":\");\n  if (parts.length === 1) {\n    return \"prod\";\n  }\n  return parts.at(0)!;\n}\n\nexport async function getTeamAndProjectFromPreviewAdminKey(\n  ctx: Context,\n  adminKey: string,\n) {\n  const parts = adminKey.split(\"|\")[0].split(\":\");\n  if (parts.length !== 3) {\n    logFailure(\n      ctx,\n      \"Malformed preview CONVEX_DEPLOY_KEY, get a new key from Project Settings.\",\n    );\n    return await ctx.crash(1);\n  }\n  const [_preview, teamSlug, projectSlug] = parts;\n  return { teamSlug, projectSlug };\n}\n"],
  "mappings": "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",
  "names": []
}
