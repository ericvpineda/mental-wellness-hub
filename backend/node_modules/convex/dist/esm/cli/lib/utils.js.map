{
  "version": 3,
  "sources": ["../../../../src/cli/lib/utils.ts"],
  "sourcesContent": ["import axios, { AxiosError, AxiosInstance, AxiosResponse, Method } from \"axios\";\nimport chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport os from \"os\";\nimport path from \"path\";\nimport * as readline from \"readline\";\nimport { z } from \"zod\";\n\nimport { ProjectConfig } from \"./config.js\";\n\nimport axiosRetry from \"axios-retry\";\nimport { spawn } from \"child_process\";\nimport { InvalidArgumentError } from \"commander\";\nimport fetchRetryFactory, { RequestInitRetryParams } from \"fetch-retry\";\nimport nodeFetch, { Headers as NodeFetchHeaders } from \"node-fetch\";\nimport {\n  Context,\n  ErrorType,\n  logError,\n  logFailure,\n  logMessage,\n  logWarning,\n} from \"../../bundler/context.js\";\nimport { version } from \"../version.js\";\nimport { Project } from \"./api.js\";\nimport {\n  getConfiguredDeploymentFromEnvVar,\n  isPreviewDeployKey,\n} from \"./deployment.js\";\n\n// For Node.js 16 support\nconst fetch = globalThis.fetch || nodeFetch;\nconst retryingFetch = fetchRetryFactory(fetch);\n\nexport const productionProvisionHost = \"https://provision.convex.dev\";\nexport const provisionHost =\n  process.env.CONVEX_PROVISION_HOST || productionProvisionHost;\nconst BIG_BRAIN_URL = `${provisionHost}/api/`;\nexport const CONVEX_DEPLOY_KEY_ENV_VAR_NAME = \"CONVEX_DEPLOY_KEY\";\n\nexport function parsePositiveInteger(value: string) {\n  const parsedValue = parseInteger(value);\n  if (parsedValue <= 0) {\n    // eslint-disable-next-line no-restricted-syntax\n    throw new InvalidArgumentError(\"Not a positive number.\");\n  }\n  return parsedValue;\n}\n\nexport function parseInteger(value: string) {\n  const parsedValue = +value;\n  if (isNaN(parsedValue)) {\n    // eslint-disable-next-line no-restricted-syntax\n    throw new InvalidArgumentError(\"Not a number.\");\n  }\n  return parsedValue;\n}\n\n/** Prompt for keyboard input with the given `query` string and return a promise\n * that resolves to the input. */\nexport function prompt(query: string) {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stderr,\n  });\n  return new Promise((resolve) =>\n    rl.question(query, (answer) => {\n      rl.close();\n      resolve(answer);\n    }),\n  );\n}\n\nexport type ErrorData = {\n  code: string;\n  message: string;\n};\n\n/**\n * Error thrown on non-2XX reponse codes to make most `fetch()` error handling\n * follow a single code path.\n */\nexport class ThrowingFetchError extends Error {\n  response: Response;\n  serverErrorData?: ErrorData;\n\n  constructor(\n    msg: string,\n    {\n      code,\n      message,\n      response,\n    }: { cause?: Error; code?: string; message?: string; response: Response },\n  ) {\n    if (code !== undefined && message !== undefined) {\n      super(`${msg}: ${code}: ${message}`);\n      this.serverErrorData = { code, message };\n    } else {\n      super(msg);\n    }\n\n    Object.setPrototypeOf(this, ThrowingFetchError.prototype);\n\n    this.response = response;\n  }\n\n  public static async fromResponse(\n    response: Response,\n    msg?: string,\n  ): Promise<ThrowingFetchError> {\n    msg = `${msg ? `${msg} ` : \"\"}${response.status} ${response.statusText}`;\n    let code, message;\n    try {\n      ({ code, message } = await response.json());\n    } catch (e: unknown) {\n      // Do nothing because the non-2XX response code is the primary error here.\n    }\n    return new ThrowingFetchError(msg, { code, message, response });\n  }\n\n  async handle(ctx: Context): Promise<never> {\n    let error_type: ErrorType = \"transient\";\n    await checkFetchErrorForDeprecation(ctx, this.response);\n\n    let msg = this.message;\n\n    if (this.response.status === 400) {\n      error_type = \"invalid filesystem or env vars\";\n    } else if (this.response.status === 401) {\n      error_type = \"fatal\";\n      msg = `${msg}\\nAuthenticate with \\`npx convex dev\\``;\n    } else if (this.response.status === 404) {\n      error_type = \"fatal\";\n      msg = `${msg}: ${this.response.url}`;\n    }\n\n    logError(ctx, chalk.red(msg.trim()));\n    return await ctx.crash(1, error_type, this);\n  }\n}\n\n/**\n * Thin wrapper around `fetch()` which throws a FetchDataError on non-2XX\n * responses which includes error code and message from the response JSON.\n * (Axios-style)\n *\n * It also accepts retry options from fetch-retry.\n */\nexport async function throwingFetch(\n  resource: RequestInfo | URL,\n  options: (RequestInit & RequestInitRetryParams) | undefined,\n): Promise<Response> {\n  const Headers = globalThis.Headers || NodeFetchHeaders;\n  const headers = new Headers((options || {})[\"headers\"]);\n  if (options?.body) {\n    if (!headers.has(\"Content-Type\")) {\n      headers.set(\"Content-Type\", \"application/json\");\n    }\n  }\n  const response = await retryingFetch(resource, options);\n  if (!response.ok) {\n    // This error must always be handled manually.\n    // eslint-disable-next-line no-restricted-syntax\n    throw await ThrowingFetchError.fromResponse(\n      response,\n      `Error fetching ${options?.method ? options.method + \" \" : \"\"} ${\n        typeof resource === \"string\"\n          ? resource\n          : \"url\" in resource\n            ? resource.url\n            : resource.toString()\n      }`,\n    );\n  }\n  return response;\n}\n\n/**\n * Handle an error a fetch error or non-2xx response.\n */\nexport async function logAndHandleFetchError(\n  ctx: Context,\n  err: unknown,\n): Promise<never> {\n  if (ctx.spinner) {\n    // Fail the spinner so the stderr lines appear\n    ctx.spinner.fail();\n  }\n  if (err instanceof ThrowingFetchError) {\n    return await err.handle(ctx);\n  } else {\n    logError(ctx, chalk.red(err));\n    return await ctx.crash(1, \"transient\", err);\n  }\n}\n\n/**\n * Handle an error from an axios request.\n *\n * TODO: Ideally this only takes in err: AxiosError, but currently\n * it's called more broadly.\n */\nexport async function logAndHandleAxiosError(\n  ctx: Context,\n  err: any,\n): Promise<never> {\n  if (ctx.spinner) {\n    // Fail the spinner so the stderr lines appear\n    ctx.spinner.fail();\n  }\n\n  let error_type: ErrorType = \"transient\";\n  if (err.response) {\n    const res = (err as AxiosError<ErrorData>).response!;\n    await checkErrorForDeprecation(ctx, res);\n\n    let msg = `${res.status} ${res.statusText}`;\n    if (res.data.code && res.data.message) {\n      msg = `${msg}: ${res.data.code}: ${res.data.message}`;\n    }\n\n    if (res.status === 400) {\n      error_type = \"invalid filesystem or env vars\";\n    } else if (res.status === 401) {\n      error_type = \"fatal\";\n      msg = `${msg}\\nAuthenticate with \\`npx convex dev\\``;\n    } else if (res.status === 404) {\n      error_type = \"fatal\";\n      msg = `${msg}: ${res.config.url}`;\n    }\n\n    logError(ctx, chalk.red(msg.trim()));\n  } else {\n    logError(ctx, chalk.red(err));\n  }\n  return await ctx.crash(1, error_type, err);\n}\n\nfunction logDeprecationWarning(ctx: Context, deprecationMessage: string) {\n  if (ctx.deprecationMessagePrinted) {\n    return;\n  }\n  ctx.deprecationMessagePrinted = true;\n  logWarning(ctx, chalk.yellow(deprecationMessage));\n}\n\nasync function checkFetchErrorForDeprecation(ctx: Context, resp: Response) {\n  const headers = resp.headers;\n  if (headers) {\n    const deprecationState = headers.get(\"x-convex-deprecation-state\");\n    const deprecationMessage = headers.get(\"x-convex-deprecation-message\");\n    switch (deprecationState) {\n      case null:\n        break;\n      case \"Deprecated\":\n        // This version is deprecated. Print a warning and crash.\n\n        // Gotcha:\n        // 1. Don't use `logDeprecationWarning` because we should always print\n        // why this we crashed (even if we printed a warning earlier).\n        logError(ctx, chalk.red(deprecationMessage));\n        return await ctx.crash(1, \"fatal\");\n      default:\n        // The error included a deprecation warning. Print, but handle the\n        // error normally (it was for another reason).\n        logDeprecationWarning(\n          ctx,\n          deprecationMessage || \"(no deprecation message included)\",\n        );\n        break;\n    }\n  }\n}\n\nasync function checkErrorForDeprecation(\n  ctx: Context,\n  resp: AxiosResponse<ErrorData, any>,\n) {\n  const headers = resp.headers;\n  if (headers) {\n    const deprecationState = headers[\"x-convex-deprecation-state\"];\n    const deprecationMessage = headers[\"x-convex-deprecation-message\"];\n    switch (deprecationState) {\n      case undefined:\n        break;\n      case \"Deprecated\":\n        // This version is deprecated. Print a warning and crash.\n\n        // Gotcha:\n        // 1. Don't use `logDeprecationWarning` because we should always print\n        // why this we crashed (even if we printed a warning earlier).\n        logError(ctx, chalk.red(deprecationMessage));\n        return await ctx.crash(1, \"fatal\");\n      default:\n        // The error included a deprecation warning. Print, but handle the\n        // error normally (it was for another reason).\n        logDeprecationWarning(ctx, deprecationMessage);\n        break;\n    }\n  }\n}\n\n/// Call this method after a successful API response to conditionally print the\n/// \"please upgrade\" message.\nexport function fetchDeprecationCheckWarning(ctx: Context, resp: Response) {\n  const headers = resp.headers;\n  if (headers) {\n    const deprecationState = headers.get(\"x-convex-deprecation-state\");\n    const deprecationMessage = headers.get(\"x-convex-deprecation-message\");\n    switch (deprecationState) {\n      case null:\n        break;\n      case \"Deprecated\":\n        // This should never happen because such states are errors, not warnings.\n        // eslint-disable-next-line no-restricted-syntax\n        throw new Error(\n          \"Called deprecationCheckWarning on a fatal error. This is a bug.\",\n        );\n      default:\n        logDeprecationWarning(\n          ctx,\n          deprecationMessage || \"(no deprecation message included)\",\n        );\n        break;\n    }\n  }\n}\n\n/// Call this method after a successful API response to conditionally print the\n/// \"please upgrade\" message.\nexport function deprecationCheckWarning(\n  ctx: Context,\n  resp: AxiosResponse<any, any>,\n) {\n  const headers = resp.headers;\n  if (headers) {\n    const deprecationState = headers[\"x-convex-deprecation-state\"];\n    const deprecationMessage = headers[\"x-convex-deprecation-message\"];\n    switch (deprecationState) {\n      case undefined:\n        break;\n      case \"Deprecated\":\n        // This should never happen because such states are errors, not warnings.\n        // eslint-disable-next-line no-restricted-syntax\n        throw new Error(\n          \"Called deprecationCheckWarning on a fatal error. This is a bug.\",\n        );\n      default:\n        logDeprecationWarning(ctx, deprecationMessage);\n        break;\n    }\n  }\n}\n\ntype Team = {\n  id: number;\n  name: string;\n  slug: string;\n};\n\nexport async function hasTeam(ctx: Context, teamSlug: string) {\n  const teams: Team[] = await bigBrainAPI({ ctx, method: \"GET\", url: \"teams\" });\n  return teams.some((team) => team.slug === teamSlug);\n}\n\nexport async function validateOrSelectTeam(\n  ctx: Context,\n  teamSlug: string | undefined,\n  promptMessage: string,\n): Promise<{ teamSlug: string; chosen: boolean }> {\n  const teams: Team[] = await bigBrainAPI({ ctx, method: \"GET\", url: \"teams\" });\n  if (teams.length === 0) {\n    logFailure(ctx, chalk.red(\"Error: No teams found\"));\n    await ctx.crash(1, \"fatal\", \"No teams found\");\n  }\n  if (!teamSlug) {\n    // Prompt the user to select if they belong to more than one team.\n    switch (teams.length) {\n      case 1:\n        return { teamSlug: teams[0].slug, chosen: false };\n      default:\n        return {\n          teamSlug: (\n            await inquirer.prompt([\n              {\n                name: \"teamSlug\",\n                message: promptMessage,\n                type: \"list\",\n                choices: teams.map((team: Team) => ({\n                  name: `${team.name} (${team.slug})`,\n                  value: team.slug,\n                })),\n              },\n            ])\n          ).teamSlug,\n          chosen: true,\n        };\n    }\n  } else {\n    // Validate the chosen team.\n    if (!teams.find((team) => team.slug === teamSlug)) {\n      logFailure(\n        ctx,\n        `Error: Team ${teamSlug} not found, fix the --team option or remove it`,\n      );\n      await ctx.crash(1, \"fatal\");\n    }\n    return { teamSlug, chosen: false };\n  }\n}\n\nexport async function hasProject(\n  ctx: Context,\n  teamSlug: string,\n  projectSlug: string,\n) {\n  try {\n    const projects: Project[] = await bigBrainAPIMaybeThrows({\n      ctx,\n      method: \"GET\",\n      url: `teams/${teamSlug}/projects`,\n    });\n    return !!projects.find((project) => project.slug === projectSlug);\n  } catch (e) {\n    return false;\n  }\n}\n\nexport async function hasProjects(ctx: Context) {\n  return !!(await bigBrainAPI({ ctx, method: \"GET\", url: `has_projects` }));\n}\n\nexport async function validateOrSelectProject(\n  ctx: Context,\n  projectSlug: string | undefined,\n  teamSlug: string,\n  singleProjectPrompt: string,\n  multiProjectPrompt: string,\n): Promise<string | null> {\n  const projects: Project[] = await bigBrainAPI({\n    ctx,\n    method: \"GET\",\n    url: `teams/${teamSlug}/projects`,\n  });\n  if (projects.length === 0) {\n    // Unexpected error\n    // eslint-disable-next-line no-restricted-syntax\n    throw new Error(\"No projects found\");\n  }\n  if (!projectSlug) {\n    const nonDemoProjects = projects.filter((project) => !project.isDemo);\n    if (nonDemoProjects.length === 0) {\n      // Unexpected error\n      // eslint-disable-next-line no-restricted-syntax\n      throw new Error(\"No projects found\");\n    }\n    // Prompt the user to select project.\n    switch (nonDemoProjects.length) {\n      case 1: {\n        const project = nonDemoProjects[0];\n        const confirmed = (\n          await inquirer.prompt([\n            {\n              type: \"confirm\",\n              name: \"confirmed\",\n              message: `${singleProjectPrompt} ${project.name} (${project.slug})?`,\n            },\n          ])\n        ).confirmed;\n\n        if (!confirmed) {\n          return null;\n        }\n        return nonDemoProjects[0].slug;\n      }\n      default:\n        return (\n          await inquirer.prompt([\n            {\n              name: \"project\",\n              message: multiProjectPrompt,\n              type: \"list\",\n              choices: nonDemoProjects.map((project: Project) => ({\n                name: `${project.name} (${project.slug})`,\n                value: project.slug,\n              })),\n            },\n          ])\n        ).project;\n    }\n  } else {\n    // Validate the chosen project.\n    if (!projects.find((project) => project.slug === projectSlug)) {\n      logFailure(\n        ctx,\n        `Error: Project ${projectSlug} not found, fix the --project option or remove it`,\n      );\n      await ctx.crash(1, \"fatal\");\n    }\n    return projectSlug;\n  }\n}\n\n/**\n * @param ctx\n * @returns a Record of dependency name to dependency version for dependencies\n * and devDependencies\n */\nexport async function loadPackageJson(\n  ctx: Context,\n): Promise<Record<string, string>> {\n  let packageJson;\n  try {\n    packageJson = ctx.fs.readUtf8File(\"package.json\");\n  } catch (err) {\n    logFailure(\n      ctx,\n      `Unable to read your package.json: ${\n        err as any\n      }. Make sure you're running this command from the root directory of a Convex app that contains the package.json`,\n    );\n    return await ctx.crash(1, \"invalid filesystem data\");\n  }\n  let obj;\n  try {\n    obj = JSON.parse(packageJson);\n  } catch (err) {\n    logFailure(ctx, `Unable to parse package.json: ${err as any}`);\n    return await ctx.crash(1, \"invalid filesystem data\", err);\n  }\n  if (typeof obj !== \"object\") {\n    logError(ctx, \"Expected to parse an object from package.json\");\n    return await ctx.crash(1, \"invalid filesystem data\");\n  }\n  const packages = {\n    ...(obj.dependencies ?? {}),\n    ...(obj.devDependencies ?? {}),\n  };\n  return packages;\n}\n\nexport async function ensureHasConvexDependency(ctx: Context, cmd: string) {\n  const packages = await loadPackageJson(ctx);\n  const hasConvexDependency = \"convex\" in packages;\n  if (!hasConvexDependency) {\n    logFailure(\n      ctx,\n      `In order to ${cmd}, add \\`convex\\` to your package.json dependencies.`,\n    );\n    return await ctx.crash(1, \"invalid filesystem data\");\n  }\n}\n\n/** Return a new array with elements of the passed in array sorted by a key lambda */\nexport const sorted = <T>(arr: T[], key: (el: T) => any): T[] => {\n  const newArr = [...arr];\n  const cmp = (a: T, b: T) => {\n    if (key(a) < key(b)) return -1;\n    if (key(a) > key(b)) return 1;\n    return 0;\n  };\n  return newArr.sort(cmp);\n};\n\nexport function functionsDir(\n  configPath: string,\n  projectConfig: ProjectConfig,\n): string {\n  return path.join(path.dirname(configPath), projectConfig.functions);\n}\n\nexport function rootDirectory(): string {\n  let dirName;\n  // Use a different directory for config files generated for tests\n  if (process.env.CONVEX_PROVISION_HOST) {\n    const port = process.env.CONVEX_PROVISION_HOST.split(\":\")[2];\n    if (port === undefined || port === \"8050\") {\n      dirName = `.convex-test`;\n    } else {\n      dirName = `.convex-test-${port}`;\n    }\n  } else {\n    dirName = \".convex\";\n  }\n  return path.join(os.homedir(), dirName);\n}\nexport function globalConfigPath(): string {\n  return path.join(rootDirectory(), \"config.json\");\n}\n\nasync function readGlobalConfig(ctx: Context): Promise<GlobalConfig | null> {\n  const configPath = globalConfigPath();\n  let configFile;\n  try {\n    configFile = ctx.fs.readUtf8File(configPath);\n  } catch (err) {\n    return null;\n  }\n  try {\n    const schema = z.object({\n      accessToken: z.string().min(1),\n    });\n    const config: GlobalConfig = schema.parse(JSON.parse(configFile));\n    return config;\n  } catch (err) {\n    // Print an error an act as if the file does not exist.\n    logError(\n      ctx,\n      chalk.red(\n        `Failed to parse global config in ${configPath} with error ${\n          err as any\n        }.`,\n      ),\n    );\n    return null;\n  }\n}\n\nexport function readAdminKeyFromEnvVar(): string | undefined {\n  return process.env[CONVEX_DEPLOY_KEY_ENV_VAR_NAME] ?? undefined;\n}\n\nexport async function getAuthHeaderForBigBrain(\n  ctx: Context,\n): Promise<string | null> {\n  if (process.env.CONVEX_OVERRIDE_ACCESS_TOKEN) {\n    return `Bearer ${process.env.CONVEX_OVERRIDE_ACCESS_TOKEN}`;\n  }\n  const globalConfig = await readGlobalConfig(ctx);\n  if (globalConfig) {\n    return `Bearer ${globalConfig.accessToken}`;\n  }\n  const adminKey = readAdminKeyFromEnvVar();\n  if (adminKey !== undefined && isPreviewDeployKey(adminKey)) {\n    return `Bearer ${adminKey}`;\n  }\n  return null;\n}\n\nexport async function bigBrainFetch(ctx: Context): Promise<typeof fetch> {\n  const authHeader = await getAuthHeaderForBigBrain(ctx);\n  const bigBrainHeaders: Record<string, string> = authHeader\n    ? {\n        Authorization: authHeader,\n        \"Convex-Client\": `npm-cli-${version}`,\n      }\n    : {\n        \"Convex-Client\": `npm-cli-${version}`,\n      };\n  return (resource: RequestInfo | URL, options: RequestInit | undefined) => {\n    const { headers: optionsHeaders, ...rest } = options || {};\n    const headers = {\n      ...bigBrainHeaders,\n      ...(optionsHeaders || {}),\n    };\n    const opts = {\n      retries: 6,\n      retryDelay,\n      headers,\n      ...rest,\n    };\n\n    const url =\n      resource instanceof URL\n        ? resource.pathname\n        : typeof resource === \"string\"\n          ? new URL(resource, BIG_BRAIN_URL)\n          : new URL(resource.url, BIG_BRAIN_URL);\n    return throwingFetch(url, opts);\n  };\n}\n\nexport async function bigBrainClient(ctx: Context): Promise<AxiosInstance> {\n  const authHeader = await getAuthHeaderForBigBrain(ctx);\n  const headers: Record<string, string> = authHeader\n    ? {\n        Authorization: authHeader,\n        \"Convex-Client\": `npm-cli-${version}`,\n      }\n    : {\n        \"Convex-Client\": `npm-cli-${version}`,\n      };\n  return axios.create({\n    headers,\n    baseURL: BIG_BRAIN_URL,\n  });\n}\n\nexport async function bigBrainAPI({\n  ctx,\n  method,\n  url,\n  data,\n}: {\n  ctx: Context;\n  method: Method;\n  url: string;\n  data?: any;\n}): Promise<any> {\n  const dataString =\n    data === undefined\n      ? undefined\n      : typeof data === \"string\"\n        ? data\n        : JSON.stringify(data);\n  try {\n    return await bigBrainAPIMaybeThrows({\n      ctx,\n      method,\n      url,\n      data: dataString,\n    });\n  } catch (err: unknown) {\n    return await logAndHandleFetchError(ctx, err);\n  }\n}\n\nexport async function bigBrainAPIMaybeThrows({\n  ctx,\n  method,\n  url,\n  data,\n}: {\n  ctx: Context;\n  method: Method;\n  url: string;\n  data?: any;\n}): Promise<any> {\n  const fetch = await bigBrainFetch(ctx);\n  const dataString =\n    data === undefined\n      ? method === \"POST\" || method === \"post\"\n        ? JSON.stringify({})\n        : undefined\n      : typeof data === \"string\"\n        ? data\n        : JSON.stringify(data);\n  const res = await fetch(url, {\n    method,\n    ...(dataString ? { body: dataString } : {}),\n    headers:\n      method === \"POST\" || method === \"post\"\n        ? {\n            \"Content-Type\": \"application/json\",\n          }\n        : {},\n  });\n  fetchDeprecationCheckWarning(ctx, res);\n  if (res.status === 200) {\n    return await res.json();\n  }\n}\n\nexport type GlobalConfig = {\n  accessToken: string;\n};\n\n/**\n * Polls an arbitrary function until a condition is met.\n *\n * @param fetch Function performing a fetch, returning resulting data.\n * @param condition This function will terminate polling when it returns `true`.\n * @param waitMs How long to wait in between fetches.\n * @returns The resulting data from `fetch`.\n */\nexport const poll = async function <Result>(\n  fetch: () => Promise<Result>,\n  condition: (data: Result) => boolean,\n  waitMs = 1000,\n) {\n  let result = await fetch();\n  while (!condition(result)) {\n    await wait(waitMs);\n    result = await fetch();\n  }\n  return result;\n};\n\nconst wait = function (waitMs: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, waitMs);\n  });\n};\n\nexport function waitForever() {\n  // This never resolves\n  return new Promise((_) => {\n    // ignore\n  });\n}\n\n// Returns a promise and a function that resolves the promise.\nexport function waitUntilCalled(): [Promise<unknown>, () => void] {\n  let onCalled: (v: unknown) => void;\n  const waitPromise = new Promise((resolve) => (onCalled = resolve));\n  return [waitPromise, () => onCalled(null)];\n}\n\n// We can eventually switch to something like `filesize` for i18n and\n// more robust formatting, but let's keep our CLI bundle small for now.\nexport function formatSize(n: number): string {\n  if (n < 1024) {\n    return `${n} B`;\n  }\n  if (n < 1024 * 1024) {\n    return `${(n / 1024).toFixed(1)} KB`;\n  }\n  if (n < 1024 * 1024 * 1024) {\n    return `${(n / 1024 / 1024).toFixed(1)} MB`;\n  }\n  return `${(n / 1024 / 1024 / 1024).toFixed(2)} GB`;\n}\n\nexport function formatDuration(ms: number): string {\n  const twoDigits = (n: number, unit: string) =>\n    `${n.toLocaleString(\"en-US\", { maximumFractionDigits: 2 })}${unit}`;\n\n  if (ms < 1e-3) {\n    return twoDigits(ms * 1e9, \"ns\");\n  }\n  if (ms < 1) {\n    return twoDigits(ms * 1e3, \"\u00B5s\");\n  }\n  if (ms < 1e3) {\n    return twoDigits(ms, \"ms\");\n  }\n  const s = ms / 1e3;\n  if (s < 60) {\n    return twoDigits(ms / 1e3, \"s\");\n  }\n  return twoDigits(s / 60, \"m\");\n}\n\nexport function getCurrentTimeString() {\n  const now = new Date();\n  const hours = String(now.getHours()).padStart(2, \"0\");\n  const minutes = String(now.getMinutes()).padStart(2, \"0\");\n  const seconds = String(now.getSeconds()).padStart(2, \"0\");\n  return `${hours}:${minutes}:${seconds}`;\n}\n\n// We don't allow running commands in project subdirectories yet,\n// but we can provide better errors if we look around.\nexport async function findParentConfigs(ctx: Context): Promise<{\n  parentPackageJson: string;\n  parentConvexJson?: string;\n}> {\n  const parentPackageJson = findUp(ctx, \"package.json\");\n  if (!parentPackageJson) {\n    logFailure(\n      ctx,\n      \"No package.json found. To create a new project using Convex, see https://docs.convex.dev/home#quickstarts\",\n    );\n    return await ctx.crash(1, \"invalid filesystem data\");\n  }\n  const candidateConvexJson =\n    parentPackageJson &&\n    path.join(path.dirname(parentPackageJson), \"convex.json\");\n  const parentConvexJson =\n    candidateConvexJson && ctx.fs.exists(candidateConvexJson)\n      ? candidateConvexJson\n      : undefined;\n  return {\n    parentPackageJson,\n    parentConvexJson,\n  };\n}\n\n/**\n * Finds a file in the current working directory or a parent.\n *\n * @returns The absolute path of the first file found or undefined.\n */\nfunction findUp(ctx: Context, filename: string): string | undefined {\n  let curDir = path.resolve(\".\");\n  let parentDir = curDir;\n  do {\n    const candidate = path.join(curDir, filename);\n    if (ctx.fs.exists(candidate)) {\n      return candidate;\n    }\n    curDir = parentDir;\n    parentDir = path.dirname(curDir);\n  } while (parentDir !== curDir);\n  return;\n}\n\n/**\n * Returns whether there's an existing project config. Throws\n * if this is not a valid directory for a project config.\n */\nexport async function isInExistingProject(ctx: Context) {\n  const { parentPackageJson, parentConvexJson } = await findParentConfigs(ctx);\n  if (parentPackageJson !== path.resolve(\"package.json\")) {\n    logFailure(ctx, \"Run this command from the root directory of a project.\");\n    return await ctx.crash(1, \"invalid filesystem data\");\n  }\n  return !!parentConvexJson;\n}\n\nexport async function getConfiguredDeploymentOrCrash(\n  ctx: Context,\n): Promise<string> {\n  const configuredDeployment = await getConfiguredDeploymentName(ctx);\n  if (configuredDeployment !== null) {\n    return configuredDeployment;\n  }\n  logFailure(\n    ctx,\n    \"No CONVEX_DEPLOYMENT set, run `npx convex dev` to configure a Convex project\",\n  );\n  return await ctx.crash(1, \"invalid filesystem data\");\n}\n\nexport async function getConfiguredDeploymentName(ctx: Context) {\n  const { parentPackageJson } = await findParentConfigs(ctx);\n  if (parentPackageJson !== path.resolve(\"package.json\")) {\n    logFailure(ctx, \"Run this command from the root directory of a project.\");\n    return await ctx.crash(1, \"invalid filesystem data\");\n  }\n  return getConfiguredDeploymentFromEnvVar().name;\n}\n\n// `spawnAsync` is the async version of Node's `spawnSync` (and `spawn`).\n//\n// By default, this returns the produced `stdout` and `stderror` and\n// an error if one was encountered (to mirror `spawnSync`).\n//\n// If `stdio` is set to `\"inherit\"`, pipes `stdout` and `stderror` (\n// pausing the spinner if one is running) and rejects the promise\n// on errors (to mirror `execFileSync`).\nexport function spawnAsync(\n  ctx: Context,\n  command: string,\n  args: ReadonlyArray<string>,\n): Promise<{\n  stdout: string;\n  stderr: string;\n  status: null | number;\n  error?: Error | undefined;\n}>;\nexport function spawnAsync(\n  ctx: Context,\n  command: string,\n  args: ReadonlyArray<string>,\n  options: { stdio: \"inherit\" },\n): Promise<void>;\nexport function spawnAsync(\n  ctx: Context,\n  command: string,\n  args: ReadonlyArray<string>,\n  options?: { stdio: \"inherit\" },\n) {\n  return new Promise((resolve, reject) => {\n    const child = spawn(command, args);\n    let stdout = \"\";\n    let stderr = \"\";\n\n    const pipeOutput = options?.stdio === \"inherit\";\n\n    if (pipeOutput) {\n      child.stdout.on(\"data\", (text) =>\n        logMessage(ctx, text.toString(\"utf-8\").trimEnd()),\n      );\n      child.stderr.on(\"data\", (text) =>\n        logError(ctx, text.toString(\"utf-8\").trimEnd()),\n      );\n    } else {\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString(\"utf-8\");\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString(\"utf-8\");\n      });\n    }\n\n    const completionListener = (code: number | null) => {\n      child.removeListener(\"error\", errorListener);\n      const result = pipeOutput\n        ? { status: code }\n        : { stdout, stderr, status: code };\n      if (code !== 0) {\n        const argumentString =\n          args && args.length > 0 ? ` ${args.join(\" \")}` : \"\";\n        const error = new Error(\n          `\\`${command}${argumentString}\\` exited with non-zero code: ${code}`,\n        );\n        if (pipeOutput) {\n          reject({ ...result, error });\n        } else {\n          resolve({ ...result, error });\n        }\n      } else {\n        resolve(result);\n      }\n    };\n\n    const errorListener = (error: Error) => {\n      child.removeListener(\"exit\", completionListener);\n      child.removeListener(\"close\", completionListener);\n      if (pipeOutput) {\n        reject({ error, status: null });\n      } else {\n        resolve({ error, status: null });\n      }\n    };\n\n    if (pipeOutput) {\n      child.once(\"exit\", completionListener);\n    } else {\n      child.once(\"close\", completionListener);\n    }\n    child.once(\"error\", errorListener);\n  });\n}\n\nconst IDEMPOTENT_METHODS = [\"GET\", \"HEAD\", \"PUT\", \"DELETE\", \"OPTIONS\", \"TRACE\"];\n\nfunction retryDelay(\n  attempt: number,\n  _error: Error | null,\n  _response: Response | null,\n): number {\n  // immediate, 1s delay, 2s delay, 4s delay, etc.\n  const delay = attempt === 0 ? 1 : 2 ** (attempt - 1) * 1000;\n  const randomSum = delay * 0.2 * Math.random();\n  return delay + randomSum;\n}\n\nexport function deploymentFetch(\n  deploymentUrl: string,\n  onError?: (err: any) => void,\n): typeof throwingFetch {\n  return (resource: RequestInfo | URL, options: RequestInit | undefined) => {\n    const url =\n      resource instanceof URL\n        ? resource.pathname\n        : typeof resource === \"string\"\n          ? new URL(resource, deploymentUrl)\n          : new URL(resource.url, deploymentUrl);\n    const func = throwingFetch(url, {\n      retries: 6,\n      retryDelay,\n      retryOn: function (\n        _attempt: number,\n        error: Error | null,\n        response: Response | null,\n      ) {\n        if (onError) {\n          onError(error);\n        }\n\n        // Retry on network errors.\n        if (error) {\n          // TODO filter out all SSL errors\n          // https://github.com/nodejs/node/blob/8a41d9b636be86350cd32847c3f89d327c4f6ff7/src/crypto/crypto_common.cc#L218-L245\n          return true;\n        }\n        // Retry on 404s since these can sometimes happen with newly created\n        // deployments for POSTs.\n        if (response?.status === 404) {\n          return true;\n        }\n\n        const method = options?.method?.toUpperCase();\n        // Whatever the error code it doesn't hurt to retry idempotent requests.\n        if (\n          response &&\n          !response.ok &&\n          method &&\n          IDEMPOTENT_METHODS.includes(method)\n        ) {\n          // ...but it's a bit annoying to wait for things we know won't succced\n          if (\n            [\n              400, // Bad Request\n              401, // Unauthorized\n              402, // PaymentRequired\n              403, // Forbidden\n              405, // Method Not Allowed\n              406, // Not Acceptable\n              412, // Precondition Failed\n              413, // Payload Too Large\n              414, // URI Too Long\n              415, // Unsupported Media Type\n              416, // Range Not Satisfiable\n            ].includes(response.status)\n          ) {\n            return false;\n          }\n          return true;\n        }\n\n        return false;\n      },\n      ...options,\n    });\n    return func;\n  };\n}\n\nexport function deploymentClient(\n  deploymentURL: string,\n  onError?: (err: any) => void,\n) {\n  const client = axios.create({\n    baseURL: deploymentURL,\n  });\n  axiosRetry(client, {\n    retries: 6,\n    retryDelay: axiosRetry.exponentialDelay,\n    retryCondition: (error) => {\n      if (onError) {\n        onError(error);\n      }\n      // Retry on 404s since these can sometimes happen with newly created deployments.\n      // Also retry on the default conditions.\n      return (\n        error.response?.status === 404 ||\n        axiosRetry.isNetworkOrIdempotentRequestError(error)\n      );\n    },\n  });\n  return client;\n}\n"],
  "mappings": "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",
  "names": ["fetch"]
}
