{
  "version": 3,
  "sources": ["../../../../src/cli/lib/run.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport util from \"util\";\nimport ws from \"ws\";\nimport { ConvexHttpClient } from \"../../browser/http_client-node.js\";\nimport { BaseConvexClient } from \"../../browser/index.js\";\nimport { PaginationResult, makeFunctionReference } from \"../../server/index.js\";\nimport { Value, convexToJson } from \"../../values/value.js\";\nimport {\n  Context,\n  logError,\n  logFailure,\n  logFinishedStep,\n  logMessage,\n  logOutput,\n} from \"../../bundler/context.js\";\nimport { waitForever, waitUntilCalled } from \"./utils.js\";\n\nexport async function runFunctionAndLog(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  functionName: string,\n  args: Value,\n  callbacks?: {\n    onSuccess?: () => void;\n  },\n) {\n  const client = new ConvexHttpClient(deploymentUrl);\n  client.setAdminAuth(adminKey);\n\n  let result: Value;\n  try {\n    result = await client.function(makeFunctionReference(functionName), args);\n  } catch (err) {\n    logFailure(ctx, `Failed to run function \"${functionName}\":`);\n    logError(ctx, chalk.red((err as Error).toString().trim()));\n    return await ctx.crash(1, \"invalid filesystem or env vars\");\n  }\n\n  callbacks?.onSuccess?.();\n\n  // `null` is the default return type\n  if (result !== null) {\n    logOutput(ctx, formatValue(result));\n  }\n}\n\nexport async function runPaginatedQuery(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  functionName: string,\n  args: Record<string, Value>,\n  limit?: number,\n) {\n  const results = [];\n  let cursor = null;\n  let isDone = false;\n  while (!isDone && (limit === undefined || results.length < limit)) {\n    const paginationResult = (await runQuery(\n      ctx,\n      deploymentUrl,\n      adminKey,\n      functionName,\n      {\n        ...args,\n        // The pagination is limited on the backend, so the 10000\n        // means \"give me as many as possible\".\n        paginationOpts: {\n          cursor,\n          numItems: limit === undefined ? 10000 : limit - results.length,\n        },\n      },\n    )) as unknown as PaginationResult<Record<string, Value>>;\n    isDone = paginationResult.isDone;\n    cursor = paginationResult.continueCursor;\n    results.push(...paginationResult.page);\n  }\n  return results;\n}\n\nexport async function runQuery(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  functionName: string,\n  args: Record<string, Value>,\n): Promise<Value> {\n  const client = new ConvexHttpClient(deploymentUrl);\n  client.setAdminAuth(adminKey);\n\n  try {\n    return await client.query(\n      makeFunctionReference<\"query\">(functionName),\n      args,\n    );\n  } catch (err) {\n    logFailure(ctx, `Failed to run query \"${functionName}\":`);\n    logError(ctx, chalk.red((err as Error).toString().trim()));\n    return await ctx.crash(1, \"invalid filesystem or env vars\");\n  }\n}\n\nexport function formatValue(value: Value) {\n  const json = convexToJson(value);\n  if (process.stdout.isTTY) {\n    // TODO (Tom) add JSON syntax highlighting like https://stackoverflow.com/a/51319962/398212\n    // until then, just spit out something that isn't quite JSON because it's easy\n    return util.inspect(value, { colors: true, depth: null });\n  } else {\n    return JSON.stringify(json, null, 2);\n  }\n}\n\nexport async function subscribeAndLog(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  functionName: string,\n  args: Record<string, Value>,\n) {\n  return subscribe(\n    ctx,\n    deploymentUrl,\n    adminKey,\n    functionName,\n    args,\n    waitForever(),\n    {\n      onStart() {\n        logFinishedStep(\n          ctx,\n          `Watching query ${functionName} on ${deploymentUrl}...`,\n        );\n      },\n      onChange(result) {\n        logOutput(ctx, formatValue(result));\n      },\n      onStop() {\n        logMessage(ctx, `Closing connection to ${deploymentUrl}...`);\n      },\n    },\n  );\n}\n\nexport async function subscribe(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  functionName: string,\n  args: Record<string, Value>,\n  until: Promise<unknown>,\n  callbacks?: {\n    onStart?: () => void;\n    onChange?: (result: Value) => void;\n    onStop?: () => void;\n  },\n) {\n  const client = new BaseConvexClient(\n    deploymentUrl,\n    (updatedQueries) => {\n      for (const queryToken of updatedQueries) {\n        callbacks?.onChange?.(client.localQueryResultByToken(queryToken)!);\n      }\n    },\n    {\n      // pretend that a Node.js 'ws' library WebSocket is a browser WebSocket\n      webSocketConstructor: ws as unknown as typeof WebSocket,\n      unsavedChangesWarning: false,\n    },\n  );\n  client.setAdminAuth(adminKey);\n  const { unsubscribe } = client.subscribe(functionName, args);\n\n  callbacks?.onStart?.();\n\n  let done = false;\n  const [donePromise, onDone] = waitUntilCalled();\n  const stopWatching = () => {\n    if (done) {\n      return;\n    }\n    done = true;\n    unsubscribe();\n    void client.close();\n    process.off(\"SIGINT\", sigintListener);\n    onDone();\n    callbacks?.onStop?.();\n  };\n  function sigintListener() {\n    stopWatching();\n  }\n  process.on(\"SIGINT\", sigintListener);\n  void until.finally(stopWatching);\n  while (!done) {\n    // loops once per day (any large value < 2**31 would work)\n    const oneDay = 24 * 60 * 60 * 1000;\n    await Promise.race([\n      donePromise,\n      new Promise((resolve) => setTimeout(resolve, oneDay)),\n    ]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
