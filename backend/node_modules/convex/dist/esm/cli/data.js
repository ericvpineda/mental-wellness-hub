"use strict";
import { Option } from "@commander-js/extra-typings";
import chalk from "chalk";
import {
  logError,
  logOutput,
  logWarning,
  oneoffContext
} from "../bundler/context.js";
import { Base64 } from "../values/index.js";
import {
  deploymentSelectionFromOptions,
  fetchDeploymentCredentialsProvisionProd
} from "./lib/api.js";
import { runPaginatedQuery } from "./lib/run.js";
import { parsePositiveInteger } from "./lib/utils.js";
import { Command } from "@commander-js/extra-typings";
import { actionDescription } from "./lib/command.js";
export const data = new Command("data").summary("List tables and print data from your database").description(
  "Inspect your Convex deployment's database.\n\n  List tables: `npx convex data`\n  List documents in a table: `npx convex data tableName`\n\nBy default, this inspects your dev deployment."
).argument("[table]", "If specified, list documents in this table.").addOption(
  new Option(
    "--limit <n>",
    "List only the `n` the most recently created documents."
  ).default(100).argParser(parsePositiveInteger)
).addOption(
  new Option(
    "--order <choice>",
    "Order the documents by their `_creationTime`."
  ).choices(["asc", "desc"]).default("desc")
).addDeploymentSelectionOptions(actionDescription("Inspect the database in")).showHelpAfterError().action(async (tableName, options) => {
  const ctx = oneoffContext;
  const deploymentSelection = deploymentSelectionFromOptions(options);
  const {
    adminKey,
    url: deploymentUrl,
    deploymentName
  } = await fetchDeploymentCredentialsProvisionProd(ctx, deploymentSelection);
  if (tableName !== void 0) {
    await listDocuments(ctx, deploymentUrl, adminKey, tableName, {
      ...options,
      order: options.order
    });
  } else {
    await listTables(ctx, deploymentUrl, adminKey, deploymentName);
  }
});
async function listTables(ctx, deploymentUrl, adminKey, deploymentName) {
  const tables = await runPaginatedQuery(
    ctx,
    deploymentUrl,
    adminKey,
    "_system/cli/tables",
    {}
  );
  if (tables.length === 0) {
    logError(
      ctx,
      `There are no tables in the ${deploymentName ? `${chalk.bold(deploymentName)} deployment's ` : ""}database.`
    );
    return;
  }
  const tableNames = tables.map((table) => table.name);
  tableNames.sort();
  logOutput(ctx, tableNames.join("\n"));
}
async function listDocuments(ctx, deploymentUrl, adminKey, tableName, options) {
  const data2 = await runPaginatedQuery(
    ctx,
    deploymentUrl,
    adminKey,
    "_system/cli/tableData",
    {
      table: tableName,
      order: options.order ?? "desc"
    },
    options.limit + 1
  );
  if (data2.length === 0) {
    logError(ctx, "There are no documents in this table.");
    return;
  }
  logDocumentsTable(
    ctx,
    data2.slice(0, options.limit).map((document) => {
      const printed = {};
      for (const key in document) {
        printed[key] = stringify(document[key]);
      }
      return printed;
    })
  );
  if (data2.length > options.limit) {
    logWarning(
      ctx,
      chalk.yellow(
        `Showing the ${options.limit} ${options.order === "desc" ? "most recently" : "oldest"} created document${options.limit > 1 ? "s" : ""}. Use the --limit option to see more.`
      )
    );
  }
}
function logDocumentsTable(ctx, rows) {
  const columnsToWidths = {};
  for (const row of rows) {
    for (const column in row) {
      const value = row[column];
      columnsToWidths[column] = Math.max(
        value.length,
        columnsToWidths[column] ?? 0
      );
    }
  }
  const unsortedFields = Object.keys(columnsToWidths);
  unsortedFields.sort();
  const fields = Array.from(
    /* @__PURE__ */ new Set(["_id", "_creationTime", ...unsortedFields])
  );
  const columnWidths = fields.map((field) => columnsToWidths[field]);
  const lineLimit = process.stdout.isTTY ? process.stdout.columns : void 0;
  let didTruncate = false;
  function limitLine(line, limit) {
    if (limit === void 0) {
      return line;
    }
    const limitWithBufferForUnicode = limit - 10;
    if (line.length > limitWithBufferForUnicode) {
      didTruncate = true;
    }
    return line.slice(0, limitWithBufferForUnicode);
  }
  logOutput(
    ctx,
    limitLine(
      fields.map((field, i) => field.padEnd(columnWidths[i])).join(" | "),
      lineLimit
    )
  );
  logOutput(
    ctx,
    limitLine(
      columnWidths.map((width) => "-".repeat(width)).join("-|-"),
      lineLimit
    )
  );
  for (const row of rows) {
    logOutput(
      ctx,
      limitLine(
        fields.map((field, i) => (row[field] ?? "").padEnd(columnWidths[i])).join(" | "),
        lineLimit
      )
    );
  }
  if (didTruncate) {
    logWarning(
      ctx,
      chalk.yellow(
        "Lines were truncated to fit the terminal width. Pipe the command to see the full output, such as:\n  `npx convex data tableName | less -S`"
      )
    );
  }
}
function stringify(value) {
  if (value === null) {
    return "null";
  }
  if (typeof value === "bigint") {
    return `${value.toString()}n`;
  }
  if (typeof value === "number") {
    return value.toString();
  }
  if (typeof value === "boolean") {
    return value.toString();
  }
  if (typeof value === "string") {
    return JSON.stringify(value);
  }
  if (value instanceof ArrayBuffer) {
    const base64Encoded = Base64.fromByteArray(new Uint8Array(value));
    return `Bytes("${base64Encoded}")`;
  }
  if (value instanceof Array) {
    return `[${value.map(stringify).join(", ")}]`;
  }
  const pairs = Object.entries(value).map(([k, v]) => `"${k}": ${stringify(v)}`).join(", ");
  return `{ ${pairs} }`;
}
//# sourceMappingURL=data.js.map
